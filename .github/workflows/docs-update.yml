name: Update documentation

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch'
        required: true
        default: 'main'
      github_repository:
        description: IIIF Commons repository with documentation
        required: true
      check_id:
        description: The id of the check which this workflow should update
        required: false
      github_sha:
        description: The sha on the repository which dispatched this workflow where the check is
        required: false
jobs:
  update-docs:
    runs-on: ubuntu-latest
    steps:
      # Then checkout dependencies, this is branch we are rebasing.
      - uses: actions/checkout@v2
        with:
          ref: 'main'
          fetch-depth: 0

      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.node }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - run: yarn install --frozen-lockfile --non-interactive

      - run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git checkout main
          node ./scripts/update-docs.js --ci --branch=${{ github.event.inputs.branch }} --repo=${{ github.event.inputs.github_repository }}

      - run: git push origin main --force-with-lease
        continue-on-error: true

      - name: Trigger Workflow
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.checks.update({
              owner: 'IIIF-Commons',
              repo: '${{ github.event.inputs.github_repository }}',
              check_run_id: '${{ github.events.input.check_id }}',
              status: 'completed',
              conclusion: 'success',
            })

